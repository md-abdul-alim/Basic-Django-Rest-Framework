From 4c727ba21585eb5a50c1ac6af47b5dde633bd66a Mon Sep 17 00:00:00 2001
From: md-abdul-alim-ish <abdul.alim@ishraak.com>
Date: Tue, 2 Feb 2021 14:27:18 +0600
Subject: [PATCH] patch add

---
 .../api_initial_commit_0ed293e_f0c8ae5.patch  | 880 ++++++++++++++++++
 1 file changed, 880 insertions(+)
 create mode 100644 patch/api_initial_commit_0ed293e_f0c8ae5.patch

diff --git a/patch/api_initial_commit_0ed293e_f0c8ae5.patch b/patch/api_initial_commit_0ed293e_f0c8ae5.patch
new file mode 100644
index 0000000..248b6ef
--- /dev/null
+++ b/patch/api_initial_commit_0ed293e_f0c8ae5.patch
@@ -0,0 +1,880 @@
+From f0c9ae5c37f148aa060793735651fdf1110fba71 Mon Sep 17 00:00:00 2001
+From: md-abdul-alim-ish <abdul.alim@ishraak.com>
+Date: Tue, 2 Feb 2021 14:23:01 +0600
+Subject: [PATCH] initial commit
+
+---
+ .vscode/settings.json                 |   3 +
+ DRF_AJAX/__init__.py                  |   0
+ DRF_AJAX/asgi.py                      |  16 ++
+ DRF_AJAX/settings.py                  | 124 +++++++++++
+ DRF_AJAX/urls.py                      |  23 ++
+ DRF_AJAX/wsgi.py                      |  16 ++
+ api/__init__.py                       |   0
+ api/admin.py                          |   6 +
+ api/apps.py                           |   5 +
+ api/migrations/0001_initial.py        |  22 ++
+ api/migrations/__init__.py            |   0
+ api/models.py                         |   9 +
+ api/serializers.py                    |   7 +
+ api/tests.py                          |   3 +
+ api/urls.py                           |  12 ++
+ api/views.py                          |  61 ++++++
+ frontend/__init__.py                  |   0
+ frontend/admin.py                     |   3 +
+ frontend/apps.py                      |   5 +
+ frontend/migrations/__init__.py       |   0
+ frontend/models.py                    |   3 +
+ frontend/templates/frontend/list.html | 297 ++++++++++++++++++++++++++
+ frontend/tests.py                     |   3 +
+ frontend/urls.py                      |   8 +
+ frontend/views.py                     |   5 +
+ manage.py                             |  22 ++
+ requirements.txt                      |   6 +
+ 27 files changed, 659 insertions(+)
+ create mode 100644 .vscode/settings.json
+ create mode 100644 DRF_AJAX/__init__.py
+ create mode 100644 DRF_AJAX/asgi.py
+ create mode 100644 DRF_AJAX/settings.py
+ create mode 100644 DRF_AJAX/urls.py
+ create mode 100644 DRF_AJAX/wsgi.py
+ create mode 100644 api/__init__.py
+ create mode 100644 api/admin.py
+ create mode 100644 api/apps.py
+ create mode 100644 api/migrations/0001_initial.py
+ create mode 100644 api/migrations/__init__.py
+ create mode 100644 api/models.py
+ create mode 100644 api/serializers.py
+ create mode 100644 api/tests.py
+ create mode 100644 api/urls.py
+ create mode 100644 api/views.py
+ create mode 100644 frontend/__init__.py
+ create mode 100644 frontend/admin.py
+ create mode 100644 frontend/apps.py
+ create mode 100644 frontend/migrations/__init__.py
+ create mode 100644 frontend/models.py
+ create mode 100644 frontend/templates/frontend/list.html
+ create mode 100644 frontend/tests.py
+ create mode 100644 frontend/urls.py
+ create mode 100644 frontend/views.py
+ create mode 100755 manage.py
+ create mode 100644 requirements.txt
+
+diff --git a/.vscode/settings.json b/.vscode/settings.json
+new file mode 100644
+index 0000000..2b7e46d
+--- /dev/null
++++ b/.vscode/settings.json
+@@ -0,0 +1,3 @@
++{
++    "python.formatting.provider": "yapf"
++}
+\ No newline at end of file
+diff --git a/DRF_AJAX/__init__.py b/DRF_AJAX/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/DRF_AJAX/asgi.py b/DRF_AJAX/asgi.py
+new file mode 100644
+index 0000000..d7adcb7
+--- /dev/null
++++ b/DRF_AJAX/asgi.py
+@@ -0,0 +1,16 @@
++"""
++ASGI config for DRF_AJAX project.
++
++It exposes the ASGI callable as a module-level variable named ``application``.
++
++For more information on this file, see
++https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
++"""
++
++import os
++
++from django.core.asgi import get_asgi_application
++
++os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'DRF_AJAX.settings')
++
++application = get_asgi_application()
+diff --git a/DRF_AJAX/settings.py b/DRF_AJAX/settings.py
+new file mode 100644
+index 0000000..7bb8401
+--- /dev/null
++++ b/DRF_AJAX/settings.py
+@@ -0,0 +1,124 @@
++"""
++Django settings for DRF_AJAX project.
++
++Generated by 'django-admin startproject' using Django 3.1.6.
++
++For more information on this file, see
++https://docs.djangoproject.com/en/3.1/topics/settings/
++
++For the full list of settings and their values, see
++https://docs.djangoproject.com/en/3.1/ref/settings/
++"""
++
++from pathlib import Path
++
++# Build paths inside the project like this: BASE_DIR / 'subdir'.
++BASE_DIR = Path(__file__).resolve().parent.parent
++
++
++# Quick-start development settings - unsuitable for production
++# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/
++
++# SECURITY WARNING: keep the secret key used in production secret!
++SECRET_KEY = '(nqdn8_6y5v)olhn$u_+s6d*^(($bd43wp&75anwmg7vbb3k3r'
++
++# SECURITY WARNING: don't run with debug turned on in production!
++DEBUG = True
++
++ALLOWED_HOSTS = []
++
++
++# Application definition
++
++INSTALLED_APPS = [
++    'django.contrib.admin',
++    'django.contrib.auth',
++    'django.contrib.contenttypes',
++    'django.contrib.sessions',
++    'django.contrib.messages',
++    'django.contrib.staticfiles',
++
++    'api',
++    'frontend',
++    'rest_framework',
++]
++
++MIDDLEWARE = [
++    'django.middleware.security.SecurityMiddleware',
++    'django.contrib.sessions.middleware.SessionMiddleware',
++    'django.middleware.common.CommonMiddleware',
++    'django.middleware.csrf.CsrfViewMiddleware',
++    'django.contrib.auth.middleware.AuthenticationMiddleware',
++    'django.contrib.messages.middleware.MessageMiddleware',
++    'django.middleware.clickjacking.XFrameOptionsMiddleware',
++]
++
++ROOT_URLCONF = 'DRF_AJAX.urls'
++
++TEMPLATES = [
++    {
++        'BACKEND': 'django.template.backends.django.DjangoTemplates',
++        'DIRS': [],
++        'APP_DIRS': True,
++        'OPTIONS': {
++            'context_processors': [
++                'django.template.context_processors.debug',
++                'django.template.context_processors.request',
++                'django.contrib.auth.context_processors.auth',
++                'django.contrib.messages.context_processors.messages',
++            ],
++        },
++    },
++]
++
++WSGI_APPLICATION = 'DRF_AJAX.wsgi.application'
++
++
++# Database
++# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
++
++DATABASES = {
++    'default': {
++        'ENGINE': 'django.db.backends.sqlite3',
++        'NAME': BASE_DIR / 'db.sqlite3',
++    }
++}
++
++
++# Password validation
++# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
++
++AUTH_PASSWORD_VALIDATORS = [
++    {
++        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
++    },
++    {
++        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
++    },
++    {
++        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
++    },
++    {
++        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
++    },
++]
++
++
++# Internationalization
++# https://docs.djangoproject.com/en/3.1/topics/i18n/
++
++LANGUAGE_CODE = 'en-us'
++
++TIME_ZONE = 'UTC'
++
++USE_I18N = True
++
++USE_L10N = True
++
++USE_TZ = True
++
++
++# Static files (CSS, JavaScript, Images)
++# https://docs.djangoproject.com/en/3.1/howto/static-files/
++
++STATIC_URL = '/static/'
+diff --git a/DRF_AJAX/urls.py b/DRF_AJAX/urls.py
+new file mode 100644
+index 0000000..337f2a0
+--- /dev/null
++++ b/DRF_AJAX/urls.py
+@@ -0,0 +1,23 @@
++"""DRF_AJAX URL Configuration
++
++The `urlpatterns` list routes URLs to views. For more information please see:
++    https://docs.djangoproject.com/en/3.1/topics/http/urls/
++Examples:
++Function views
++    1. Add an import:  from my_app import views
++    2. Add a URL to urlpatterns:  path('', views.home, name='home')
++Class-based views
++    1. Add an import:  from other_app.views import Home
++    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
++Including another URLconf
++    1. Import the include() function: from django.urls import include, path
++    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
++"""
++from django.contrib import admin
++from django.urls import path, include
++
++urlpatterns = [
++    path('admin/', admin.site.urls),
++    path('api/', include('api.urls')),
++    path('', include('frontend.urls')),
++]
+diff --git a/DRF_AJAX/wsgi.py b/DRF_AJAX/wsgi.py
+new file mode 100644
+index 0000000..edcb0be
+--- /dev/null
++++ b/DRF_AJAX/wsgi.py
+@@ -0,0 +1,16 @@
++"""
++WSGI config for DRF_AJAX project.
++
++It exposes the WSGI callable as a module-level variable named ``application``.
++
++For more information on this file, see
++https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
++"""
++
++import os
++
++from django.core.wsgi import get_wsgi_application
++
++os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'DRF_AJAX.settings')
++
++application = get_wsgi_application()
+diff --git a/api/__init__.py b/api/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/api/admin.py b/api/admin.py
+new file mode 100644
+index 0000000..6794d0a
+--- /dev/null
++++ b/api/admin.py
+@@ -0,0 +1,6 @@
++from django.contrib import admin
++
++# Register your models here.
++from .models import Task
++
++admin.site.register(Task)
+\ No newline at end of file
+diff --git a/api/apps.py b/api/apps.py
+new file mode 100644
+index 0000000..d87006d
+--- /dev/null
++++ b/api/apps.py
+@@ -0,0 +1,5 @@
++from django.apps import AppConfig
++
++
++class ApiConfig(AppConfig):
++    name = 'api'
+diff --git a/api/migrations/0001_initial.py b/api/migrations/0001_initial.py
+new file mode 100644
+index 0000000..81b425c
+--- /dev/null
++++ b/api/migrations/0001_initial.py
+@@ -0,0 +1,22 @@
++# Generated by Django 3.1.6 on 2021-02-02 08:17
++
++from django.db import migrations, models
++
++
++class Migration(migrations.Migration):
++
++    initial = True
++
++    dependencies = [
++    ]
++
++    operations = [
++        migrations.CreateModel(
++            name='Task',
++            fields=[
++                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
++                ('title', models.CharField(max_length=200)),
++                ('completed', models.BooleanField(blank=True, default=False, null=True)),
++            ],
++        ),
++    ]
+diff --git a/api/migrations/__init__.py b/api/migrations/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/api/models.py b/api/models.py
+new file mode 100644
+index 0000000..fb831ce
+--- /dev/null
++++ b/api/models.py
+@@ -0,0 +1,9 @@
++from django.db import models
++
++# Create your models here.
++class Task(models.Model):
++  title = models.CharField(max_length=200)
++  completed = models.BooleanField(default=False, blank=True, null=True)
++      
++  def __str__(self):
++    return self.title
+\ No newline at end of file
+diff --git a/api/serializers.py b/api/serializers.py
+new file mode 100644
+index 0000000..408dc47
+--- /dev/null
++++ b/api/serializers.py
+@@ -0,0 +1,7 @@
++from rest_framework import serializers
++from .models import Task
++
++class TaskSerializer(serializers.ModelSerializer):
++	class Meta:
++		model = Task
++		fields ='__all__'
+\ No newline at end of file
+diff --git a/api/tests.py b/api/tests.py
+new file mode 100644
+index 0000000..7ce503c
+--- /dev/null
++++ b/api/tests.py
+@@ -0,0 +1,3 @@
++from django.test import TestCase
++
++# Create your tests here.
+diff --git a/api/urls.py b/api/urls.py
+new file mode 100644
+index 0000000..486e55a
+--- /dev/null
++++ b/api/urls.py
+@@ -0,0 +1,12 @@
++from django.urls import path
++from . import views
++
++urlpatterns = [
++	path('', views.apiOverview, name="api-overview"),
++	path('task-list/', views.taskList, name="task-list"),
++	path('task-detail/<str:pk>/', views.taskDetail, name="task-detail"),
++	path('task-create/', views.taskCreate, name="task-create"),
++
++	path('task-update/<str:pk>/', views.taskUpdate, name="task-update"),
++	path('task-delete/<str:pk>/', views.taskDelete, name="task-delete"),
++]
+\ No newline at end of file
+diff --git a/api/views.py b/api/views.py
+new file mode 100644
+index 0000000..c5127f1
+--- /dev/null
++++ b/api/views.py
+@@ -0,0 +1,61 @@
++from django.shortcuts import render
++from django.http import JsonResponse
++
++from rest_framework.decorators import api_view
++from rest_framework.response import Response
++from .serializers import TaskSerializer
++
++from .models import Task
++# Create your views here.
++
++@api_view(['GET'])
++def apiOverview(request):
++	api_urls = {
++		'List':'/task-list/',
++		'Detail View':'/task-detail/<str:pk>/',
++		'Create':'/task-create/',
++		'Update':'/task-update/<str:pk>/',
++		'Delete':'/task-delete/<str:pk>/',
++		}
++
++	return Response(api_urls)
++
++@api_view(['GET'])
++def taskList(request):
++	tasks = Task.objects.all().order_by('-id')
++	serializer = TaskSerializer(tasks, many=True)
++	return Response(serializer.data)
++
++@api_view(['GET'])
++def taskDetail(request, pk):
++	tasks = Task.objects.get(id=pk)
++	serializer = TaskSerializer(tasks, many=False)
++	return Response(serializer.data)
++
++
++@api_view(['POST'])
++def taskCreate(request):
++	serializer = TaskSerializer(data=request.data)
++
++	if serializer.is_valid():
++		serializer.save()
++
++	return Response(serializer.data)
++
++@api_view(['POST'])
++def taskUpdate(request, pk):
++	task = Task.objects.get(id=pk)
++	serializer = TaskSerializer(instance=task, data=request.data)
++
++	if serializer.is_valid():
++		serializer.save()
++
++	return Response(serializer.data)
++
++
++@api_view(['DELETE'])
++def taskDelete(request, pk):
++	task = Task.objects.get(id=pk)
++	task.delete()
++
++	return Response('Item succsesfully delete!')
+\ No newline at end of file
+diff --git a/frontend/__init__.py b/frontend/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/frontend/admin.py b/frontend/admin.py
+new file mode 100644
+index 0000000..8c38f3f
+--- /dev/null
++++ b/frontend/admin.py
+@@ -0,0 +1,3 @@
++from django.contrib import admin
++
++# Register your models here.
+diff --git a/frontend/apps.py b/frontend/apps.py
+new file mode 100644
+index 0000000..33ae5ca
+--- /dev/null
++++ b/frontend/apps.py
+@@ -0,0 +1,5 @@
++from django.apps import AppConfig
++
++
++class FrontendConfig(AppConfig):
++    name = 'frontend'
+diff --git a/frontend/migrations/__init__.py b/frontend/migrations/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/frontend/models.py b/frontend/models.py
+new file mode 100644
+index 0000000..71a8362
+--- /dev/null
++++ b/frontend/models.py
+@@ -0,0 +1,3 @@
++from django.db import models
++
++# Create your models here.
+diff --git a/frontend/templates/frontend/list.html b/frontend/templates/frontend/list.html
+new file mode 100644
+index 0000000..b7ad559
+--- /dev/null
++++ b/frontend/templates/frontend/list.html
+@@ -0,0 +1,297 @@
++<!DOCTYPE html>
++<html>
++<head>
++	<title>TO DO</title>
++
++	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
++
++	<link href="https://fonts.googleapis.com/css?family=Montserrat&display=swap" rel="stylesheet">
++
++	<style type="text/css">
++		body{
++		  background: rgb(54,217,182);
++		  background: linear-gradient(90deg, rgba(54,217,182,1) 0%, rgba(32,152,126,1) 43%, rgba(0,212,255,1) 100%);
++		}
++
++
++		h1, h2, h3, h4, h5, p, span, strike{
++		  font-family: 'Montserrat', sans-serif;
++
++		}
++
++
++		#task-container{
++		  max-width:600px;
++		  margin:0 auto;
++		  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
++		  background-color: #fff;
++		  
++		  margin-top:100px;
++		  margin-bottom:100px;
++
++		  justify-content: space-around;
++		  align-items: flex-start;
++
++		}
++
++		#form-wrapper{
++		  position: -webkit-sticky;
++		  position: sticky;
++		  top: 0rem;
++		  border-bottom: 1px solid  #e9e9e9;
++		  background-color: #fff;
++		  box-shadow: 0 3px 8px rgba(0,0,0,0.25);
++ 		  padding:40px;
++		}
++
++		#submit{
++		  background-color: #36d9b6;
++		  border-radius: 0;
++		  border:0;
++		  color: #fff;
++		}
++
++		.flex-wrapper{
++			display: flex;
++		}
++
++		.task-wrapper{
++		  	margin:5px;
++		  	padding: 5px;
++		  	padding:20px;
++		  	cursor: pointer;
++		  	border-bottom: 1px solid  #e9e9e9;
++		  	color: #686868;
++			}
++
++	</style>
++
++</head>
++<body>
++	<div class="container">
++
++		<div id="task-container">
++			<div id="form-wrapper">
++				<form id="form">
++					<div class="flex-wrapper">
++						<div style="flex: 6">
++							<input id="title" class="form-control" type="text" name="title" placeholder="Add task">
++						</div>
++						<div style="flex: 1">
++							<input id="submit" class="btn" type="submit" >
++						</div>
++					</div>
++				</form>
++			</div>
++
++			<div id="list-wrapper">
++			
++			</div>	
++		</div>
++
++	</div>
++
++	<script type="text/javascript">
++		/*
++			KEY COMPONENTS:
++			"activeItem" = null until an edit button is clicked. Will contain object of item we are editing
++			"list_snapshot" = Will contain previous state of list. Used for removing extra rows on list update
++			
++			PROCESS:
++			1 - Fetch Data and build rows "buildList()"
++			2 - Create Item on form submit
++			3 - Edit Item click - Prefill form and change submit URL
++			4 - Delete Item - Send item id to delete URL
++			5 - Cross out completed task - Event handle updated item
++			NOTES:
++			-- Add event handlers to "edit", "delete", "title"
++			-- Render with strike through items completed
++			-- Remove extra data on re-render
++			-- CSRF Token
++		*/
++
++		function getCookie(name) {
++		    var cookieValue = null;
++		    if (document.cookie && document.cookie !== '') {
++		        var cookies = document.cookie.split(';');
++		        for (var i = 0; i < cookies.length; i++) {
++		            var cookie = cookies[i].trim();
++		            // Does this cookie string begin with the name we want?
++		            if (cookie.substring(0, name.length + 1) === (name + '=')) {
++		                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
++		                break;
++		            }
++		        }
++		    }
++		    return cookieValue;
++		}
++		var csrftoken = getCookie('csrftoken');
++
++		var activeItem = null
++		var list_snapshot = []
++
++		buildList()
++
++		function buildList(){
++			var wrapper = document.getElementById('list-wrapper')
++			//wrapper.innerHTML = ''
++
++
++
++			var url = 'http://127.0.0.1:8000/api/task-list/'
++
++			fetch(url)
++			.then((resp) => resp.json())
++			.then(function(data){
++				console.log('Data:', data)
++
++				var list = data
++				for (var i in list){
++
++
++					try{
++						document.getElementById(`data-row-${i}`).remove()
++					}catch(err){
++
++					}
++			
++
++
++					var title = `<span class="title">${list[i].title}</span>`
++					if (list[i].completed == true){
++						title = `<strike class="title">${list[i].title}</strike>`
++					}
++
++					var item = `
++						<div id="data-row-${i}" class="task-wrapper flex-wrapper">
++							<div style="flex:7">
++								${title}
++							</div>
++							<div style="flex:1">
++								<button class="btn btn-sm btn-outline-info edit">Edit </button>
++							</div>
++							<div style="flex:1">
++								<button class="btn btn-sm btn-outline-dark delete">-</button>
++							</div>
++						</div>
++					`
++					wrapper.innerHTML += item
++	
++				}
++
++				if (list_snapshot.length > list.length){
++					for (var i = list.length; i < list_snapshot.length; i++){
++						document.getElementById(`data-row-${i}`).remove()
++					}
++				}
++
++				list_snapshot = list
++
++
++				for (var i in list){
++					var editBtn = document.getElementsByClassName('edit')[i]
++					var deleteBtn = document.getElementsByClassName('delete')[i]
++					var title = document.getElementsByClassName('title')[i]
++
++
++					editBtn.addEventListener('click', (function(item){
++						return function(){
++							editItem(item)
++						}
++					})(list[i]))
++
++
++					deleteBtn.addEventListener('click', (function(item){
++						return function(){
++							deleteItem(item)
++						}
++					})(list[i]))
++
++
++
++					
++					title.addEventListener('click', (function(item){
++						return function(){
++							strikeUnstrike(item)
++						}
++					})(list[i]))
++
++
++				}
++
++
++			})
++		}
++
++
++		var form = document.getElementById('form-wrapper')
++		form.addEventListener('submit', function(e){
++			e.preventDefault()
++			console.log('Form submitted')
++			var url = 'http://127.0.0.1:8000/api/task-create/'
++			if (activeItem != null){
++				var url = `http://127.0.0.1:8000/api/task-update/${activeItem.id}/`
++				activeItem = null
++			}
++
++
++
++			var title = document.getElementById('title').value
++			fetch(url, {
++				method:'POST',
++				headers:{
++					'Content-type':'application/json',
++					'X-CSRFToken':csrftoken,
++				},
++				body:JSON.stringify({'title':title})
++			}
++			).then(function(response){
++				buildList()
++				document.getElementById('form').reset()
++			})
++		})
++
++
++
++
++		function editItem(item){
++			console.log('Item clicked:', item)
++			activeItem = item
++			document.getElementById('title').value = activeItem.title
++		}
++
++
++		function deleteItem(item){
++			console.log('Delete clicked')
++			fetch(`http://127.0.0.1:8000/api/task-delete/${item.id}/`, {
++				method:'DELETE', 
++				headers:{
++					'Content-type':'application/json',
++					'X-CSRFToken':csrftoken,
++				}
++			}).then((response) => {
++				buildList()
++			})
++		}
++
++		function strikeUnstrike(item){
++			console.log('Strike clicked')
++
++			item.completed = !item.completed
++			fetch(`http://127.0.0.1:8000/api/task-update/${item.id}/`, {
++				method:'POST', 
++				headers:{
++					'Content-type':'application/json',
++					'X-CSRFToken':csrftoken,
++				},
++				body:JSON.stringify({'title':item.title, 'completed':item.completed})
++			}).then((response) => {
++				buildList()
++			})
++		}
++
++
++	</script>
++
++</body>
++</html>
+\ No newline at end of file
+diff --git a/frontend/tests.py b/frontend/tests.py
+new file mode 100644
+index 0000000..7ce503c
+--- /dev/null
++++ b/frontend/tests.py
+@@ -0,0 +1,3 @@
++from django.test import TestCase
++
++# Create your tests here.
+diff --git a/frontend/urls.py b/frontend/urls.py
+new file mode 100644
+index 0000000..e0e8370
+--- /dev/null
++++ b/frontend/urls.py
+@@ -0,0 +1,8 @@
++
++from django.urls import path
++from . import views
++
++urlpatterns = [
++	path('', views.list, name="list"),
++
++]
+\ No newline at end of file
+diff --git a/frontend/views.py b/frontend/views.py
+new file mode 100644
+index 0000000..c237fb8
+--- /dev/null
++++ b/frontend/views.py
+@@ -0,0 +1,5 @@
++from django.shortcuts import render
++
++# Create your views here.
++def list(request):
++	return render(request, 'frontend/list.html')
+\ No newline at end of file
+diff --git a/manage.py b/manage.py
+new file mode 100755
+index 0000000..4e5194f
+--- /dev/null
++++ b/manage.py
+@@ -0,0 +1,22 @@
++#!/usr/bin/env python
++"""Django's command-line utility for administrative tasks."""
++import os
++import sys
++
++
++def main():
++    """Run administrative tasks."""
++    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'DRF_AJAX.settings')
++    try:
++        from django.core.management import execute_from_command_line
++    except ImportError as exc:
++        raise ImportError(
++            "Couldn't import Django. Are you sure it's installed and "
++            "available on your PYTHONPATH environment variable? Did you "
++            "forget to activate a virtual environment?"
++        ) from exc
++    execute_from_command_line(sys.argv)
++
++
++if __name__ == '__main__':
++    main()
+diff --git a/requirements.txt b/requirements.txt
+new file mode 100644
+index 0000000..87f23c7
+--- /dev/null
++++ b/requirements.txt
+@@ -0,0 +1,6 @@
++asgiref==3.3.1
++Django==3.1.6
++djangorestframework==3.12.2
++pkg-resources==0.0.0
++pytz==2021.1
++sqlparse==0.4.1
+-- 
+2.17.1
+
-- 
2.17.1

